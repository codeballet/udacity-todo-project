service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  # tracing:
  #   lambda: true
  #   apiGateway: true

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    IMAGES_S3_BUCKET: serverless-todo-images-stj-${self:provider.stage}
    SINGED_URL_EXPIRATION: 300
    USER_ID_INDEX: UserIdIndex

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments,
          - xray:PutTelemetryRecords,
          - xray:GetSamplingRules,
          - xray:GetSamplingTargets,
          - xray:GetSamplingStatisticSummaries,
          - xray:BatchGetTraces,
          - xray:GetServiceGraph,
          - xray:GetTraceGraph,
          - xray:GetTraceSummaries,
          - xray:GetGroups,
          - xray:GetGroup
        Resource:
          - '*'

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments,
          - xray:PutTelemetryRecords,
          - xray:GetSamplingRules,
          - xray:GetSamplingTargets,
          - xray:GetSamplingStatisticSummaries,
          - xray:BatchGetTraces,
          - xray:GetServiceGraph,
          - xray:GetTraceGraph,
          - xray:GetTraceSummaries,
          - xray:GetGroups,
          - xray:GetGroup
        Resource:
          - '*'

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments,
          - xray:PutTelemetryRecords,
          - xray:GetSamplingRules,
          - xray:GetSamplingTargets,
          - xray:GetSamplingStatisticSummaries,
          - xray:BatchGetTraces,
          - xray:GetServiceGraph,
          - xray:GetTraceGraph,
          - xray:GetTraceSummaries,
          - xray:GetGroups,
          - xray:GetGroup
        Resource:
          - '*'

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments,
          - xray:PutTelemetryRecords,
          - xray:GetSamplingRules,
          - xray:GetSamplingTargets,
          - xray:GetSamplingStatisticSummaries,
          - xray:BatchGetTraces,
          - xray:GetServiceGraph,
          - xray:GetTraceGraph,
          - xray:GetTraceSummaries,
          - xray:GetGroups,
          - xray:GetGroup
        Resource:
          - '*'

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments,
          - xray:PutTelemetryRecords,
          - xray:GetSamplingRules,
          - xray:GetSamplingTargets,
          - xray:GetSamplingStatisticSummaries,
          - xray:BatchGetTraces,
          - xray:GetServiceGraph,
          - xray:GetTraceGraph,
          - xray:GetTraceSummaries,
          - xray:GetGroups,
          - xray:GetGroup
        Resource:
          - '*'
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    TodosDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          # - AttributeName: createdAt
          #   AttributeType: S
          # - AttributeName: userId
          #   AttributeType: S
        KeySchema:  
          - AttributeName: todoId
            KeyType: HASH
          # - AttributeName: createdAt
          #   KeyType: RANGE
        # GlobalSecondaryIndexes:
        #   - IndexName: ${self:provider.environment.USER_ID_INDEX}
        #     KeySchema:
        #       - AttributeName: userId
        #         KeyType: HASH
        #     Projection:
        #       ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}

    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
